---
- hosts: all
  become: true
  tasks:
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: [apt-transport-https, ca-certificates, curl, gnupg-agent, software-properties-common]
        state: present
        update_cache: yes

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for Docker
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Install Docker and containerd
      apt:
        name:
          - containerd.io
          - docker-ce
          - docker-ce-cli
        state: present
        update_cache: yes


    - name: Add vagrant user to docker group
      user:
        name: vagrant
        group: docker
        append: yes

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Kubernetes Release GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        dest: /tmp/kubernetes-release.key
        mode: '0644'

    - name: Convert Kubernetes GPG key to .gpg format
      command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Kubernetes components
      apt:
        name:
          - kubeadm
          - kubectl
          - kubelet
          - vim
          - net-tools
          - etcd-client
        state: present

    - name: Generate default containerd config
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Enable cri plugin in containerd config
      replace:
        path: /etc/containerd/config.toml
        regexp: '^disabled_plugins = \["cri"\]'
        replace: '#disabled_plugins = ["cri"]'

    - name: Restart containerd
      service:
        name: containerd
        state: restarted
        enabled: true

    - name: Set the IP of the netcard enp0s8
      ansible.builtin.shell: ip -o -4 addr show enp0s8 | awk '{print $4}' | cut -d/ -f1
      register: enp0s8_ip
      changed_when: false

    - name: Enable kubelet service
      become: true
      command: systemctl enable kubelet

    - name: Set kubelet node IP
      lineinfile:
        path: /etc/default/kubelet
        line: "KUBELET_EXTRA_ARGS=--node-ip={{ enp0s8_ip.stdout }}"
        create: yes

    - name: Restart kubelet
      systemd:
        name: kubelet
        state: restarted
        daemon_reload: yes

    - name: Ensure /var/lib/etcd is empty (if kubeadm is managing etcd)
      file:
        path: /var/lib/etcd
        state: absent

    - name: Initialize the Kubernetes cluster
      command: kubeadm init --apiserver-advertise-address={{ enp0s8_ip.stdout }} --apiserver-cert-extra-sans={{ enp0s8_ip.stdout }} --node-name controlplane --pod-network-cidr=10.0.1.0/24
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Setup kubeconfig for vagrant user
      shell: |
        mkdir -p /home/vagrant/.kube
        cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
        chown vagrant:vagrant /home/vagrant/.kube/config

    - name: Install Calico pod network
      become: false
      command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/calico.yaml

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Save join command
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  handlers:
    - name: docker status
      service:
        name: docker
        state: started
